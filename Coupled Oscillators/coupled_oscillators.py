# -*- coding: utf-8 -*-
"""Coupled_Oscillators.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1chYFnzg-hyrr7GZXYgI2S7tV6DokuzdN
"""

# Commented out IPython magic to ensure Python compatibility.
# ----------------------------
# Coupled Oscillators Enhanced Simulation
# ----------------------------
"""
Coupled Oscillators Simulation
------------------------------
Author: Petros Agridos
Description:
Simulates two masses connected by a spring using the 4th-order Runge-Kutta method.
Plots displacement, energy, phase-space trajectories, normal modes, FFT, and animation.
Interactive sliders allow modification of masses, spring constant, and initial conditions to explore
the physics of coupled oscillations dynamically.
"""

# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML
import ipywidgets as widgets
from ipywidgets import interact

# ----------------------------
# Default Parameters
# ----------------------------
m1_default = 2.5
m2_default = 1.0
k_default = 1.0
dt = 0.01
T = 20
num_steps = int(T/dt)

x1_0_default, x2_0_default = 1.0, -0.5
v1_0_default, v2_0_default = 0.0, 0.0

# ----------------------------
# RK4 Functions
# ----------------------------
def derivatives(state, m1, m2, k):
    x1, v1, x2, v2 = state
    dx1dt = v1
    dv1dt = -k*(x1 - x2)/m1
    dx2dt = v2
    dv2dt = -k*(x2 - x1)/m2
    return np.array([dx1dt, dv1dt, dx2dt, dv2dt])

def rk4_step(state, dt, m1, m2, k):
    k1 = derivatives(state, m1, m2, k)
    k2 = derivatives(state + 0.5*dt*k1, m1, m2, k)
    k3 = derivatives(state + 0.5*dt*k2, m1, m2, k)
    k4 = derivatives(state + dt*k3, m1, m2, k)
    return state + (dt/6)*(k1 + 2*k2 + 2*k3 + k4)

# ----------------------------
# Time Integration Function
# ----------------------------
def simulate_coupled_oscillators(m1, m2, k, x1_0, x2_0, v1_0, v2_0):
    states = np.zeros((num_steps, 4))
    states[0] = np.array([x1_0, v1_0, x2_0, v2_0])
    for i in range(num_steps-1):
        states[i+1] = rk4_step(states[i], dt, m1, m2, k)
    x1, v1, x2, v2 = states[:,0], states[:,1], states[:,2], states[:,3]
    time = np.linspace(0, T, num_steps)
    return time, x1, v1, x2, v2

# ----------------------------
# Plotting Function
# ----------------------------
def plot_all(m1, m2, k, x1_0, x2_0, v1_0, v2_0):
    time, x1, v1, x2, v2 = simulate_coupled_oscillators(m1, m2, k, x1_0, x2_0, v1_0, v2_0)

    # Displacement
    plt.figure(figsize=(10,4))
    plt.plot(time, x1, label="Mass 1", color='magenta')
    plt.plot(time, x2, label="Mass 2", color='grey')
    plt.xlabel("Time (s)")
    plt.ylabel("Displacement (m)")
    plt.title("Coupled Oscillators: Displacement vs Time")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Energy
    KE = 0.5*m1*v1**2 + 0.5*m2*v2**2
    PE = 0.5*k*(x1 - x2)**2
    E_total = KE + PE

    plt.figure(figsize=(10,4))
    plt.plot(time, KE, label="Kinetic Energy", color='blue')
    plt.plot(time, PE, label="Potential Energy", color='red')
    plt.plot(time, E_total, label="Total Energy", linestyle='--', color='black')
    plt.xlabel("Time (s)")
    plt.ylabel("Energy (J)")
    plt.title("Coupled Oscillators: Energy vs Time")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Phase Space
    plt.figure(figsize=(10,4))
    plt.plot(x1, v1, label="Mass 1 Phase Space", color='magenta')
    plt.plot(x2, v2, label="Mass 2 Phase Space", color='grey')
    plt.xlabel("Displacement (m)")
    plt.ylabel("Velocity (m/s)")
    plt.title("Phase Space Trajectories")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Normal Modes
    x_plus = x1/np.sqrt(m1) + x2/np.sqrt(m2)
    x_minus = x1/np.sqrt(m1) - x2/np.sqrt(m2)

    plt.figure(figsize=(10,4))
    plt.plot(time, x_plus, label="Symmetric Mode (+)", color='magenta')
    plt.plot(time, x_minus, label="Antisymmetric Mode (-)", color='grey')
    plt.xlabel("Time (s)")
    plt.ylabel("Mode Amplitude")
    plt.title("Normal Modes of Coupled Oscillators")
    plt.grid(True)
    plt.legend()
    plt.show()


# ----------------------------
# Interactive Sliders
# ----------------------------
interact(plot_all,
         m1=widgets.FloatSlider(value=m1_default, min=0.5, max=5, step=0.1, description='Mass 1'),
         m2=widgets.FloatSlider(value=m2_default, min=0.5, max=5, step=0.1, description='Mass 2'),
         k=widgets.FloatSlider(value=k_default, min=0.1, max=5, step=0.1, description='Spring k'),
         x1_0=widgets.FloatSlider(value=x1_0_default, min=-2, max=2, step=0.1, description='x1_0'),
         x2_0=widgets.FloatSlider(value=x2_0_default, min=-2, max=2, step=0.1, description='x2_0'),
         v1_0=widgets.FloatSlider(value=v1_0_default, min=-5, max=5, step=0.1, description='v1_0'),
         v2_0=widgets.FloatSlider(value=v2_0_default, min=-5, max=5, step=0.1, description='v2_0'));

